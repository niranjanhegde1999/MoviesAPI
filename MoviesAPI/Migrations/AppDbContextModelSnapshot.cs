// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesAPI.Data;

namespace MoviesAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("MoviesAPI.Data.Models.Actor", b =>
                {
                    b.Property<int>("actor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("actor_name")
                        .HasColumnType("longtext");

                    b.Property<string>("biodata")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("date_of_birth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("gender")
                        .HasColumnType("longtext");

                    b.HasKey("actor_id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.Movie", b =>
                {
                    b.Property<int>("movie_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("date_of_release")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("movie_name")
                        .HasColumnType("longtext");

                    b.Property<int?>("producer_id")
                        .HasColumnType("int");

                    b.HasKey("movie_id");

                    b.HasIndex("producer_id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.MovieActor", b =>
                {
                    b.Property<int>("movie_id")
                        .HasColumnType("int");

                    b.Property<int>("actor_id")
                        .HasColumnType("int");

                    b.HasKey("movie_id", "actor_id");

                    b.HasIndex("actor_id");

                    b.ToTable("Movie_Actors");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.MovieGallery", b =>
                {
                    b.Property<int>("pic_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("movie_id")
                        .HasColumnType("int");

                    b.Property<string>("pic_path")
                        .HasColumnType("longtext");

                    b.HasKey("pic_id");

                    b.HasIndex("movie_id");

                    b.ToTable("Movie_Galleries");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.Producer", b =>
                {
                    b.Property<int>("producer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("company_name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("date_of_birth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("gender")
                        .HasColumnType("longtext");

                    b.Property<string>("producer_name")
                        .HasColumnType("longtext");

                    b.HasKey("producer_id");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.Movie", b =>
                {
                    b.HasOne("MoviesAPI.Data.Models.Producer", "producer")
                        .WithMany()
                        .HasForeignKey("producer_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("producer");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.MovieActor", b =>
                {
                    b.HasOne("MoviesAPI.Data.Models.Actor", "actor")
                        .WithMany("movie_actors")
                        .HasForeignKey("actor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesAPI.Data.Models.Movie", "movie")
                        .WithMany("movie_actors")
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("actor");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.MovieGallery", b =>
                {
                    b.HasOne("MoviesAPI.Data.Models.Movie", "movie")
                        .WithMany("movie_galleries")
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.Actor", b =>
                {
                    b.Navigation("movie_actors");
                });

            modelBuilder.Entity("MoviesAPI.Data.Models.Movie", b =>
                {
                    b.Navigation("movie_actors");

                    b.Navigation("movie_galleries");
                });
#pragma warning restore 612, 618
        }
    }
}
